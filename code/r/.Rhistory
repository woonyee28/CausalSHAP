cat(paste(path, collapse = " -> "), "\n")
}
}
library(ggplot2)
# Set the seed for reproducibility
set.seed(42)
# Generate the data
n_samples <- 1000
# Generate the first layer of input variables
sleepiness <- round(runif(n_samples, 1, 10))
smoking <- round(rnorm(n_samples, 5, 2))
air_quality_index <- round(rnorm(5,2))
# Generate the intermediate variables
drink_coffee <-  0.5 * sleepiness + 0.4 * smoking + rnorm(n_samples, 0, 1)
# Generate the target variable (lung cancer risk) with non-linear effects
lung_cancer_risk <- smoking * 2 + air_quality_index + rnorm(n_samples, 2, 3)
# Create the dataset
data <- data.frame(
sleepiness = sleepiness,
smoking = smoking,
air_quality_index = air_quality_index,
drink_coffee = drink_coffee,
lung_cancer_risk = lung_cancer_risk
)
write.csv(data, "Synthetic_LC_Dec.csv", row.names = FALSE)
# Convert data to matrix and scale
X <- as.matrix(data)
X_scaled <- scale(X)
# PC Algorithm
suffStat <- list(C = cor(X_scaled), n = nrow(X_scaled))
alpha <- 0.1
var_names <- colnames(X_scaled)
pc_result <- pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = alpha,
labels = var_names,
verbose = FALSE,
skel.method = "stable"
)
# Plot PC result
plot(pc_result@graph)
# Get adjacency matrix
adj_matrix <- as(pc_result@graph, "matrix")
# Function to get edges
get_edges <- function(adj_matrix) {
edges <- which(adj_matrix != 0, arr.ind = TRUE)
edge_list <- data.frame(
from = rownames(adj_matrix)[edges[, 1]],
to = colnames(adj_matrix)[edges[, 2]]
)
return(edge_list)
}
# Apply IDA
ida_results_list <- list()
edge_list <- get_edges(adj_matrix)
# Loop through edges and apply IDA
for (i in 1:nrow(edge_list)) {
x <- edge_list[i, "from"]
y <- edge_list[i, "to"]
if (x != y) {
x_pos <- match(x, var_names)
y_pos <- match(y, var_names)
result <- pcalg::ida(
y.pos = y_pos,
x.pos = x_pos,
mcov = cov(X_scaled),
graphEst = pc_result@graph,
method = "local",
type = "pdag"
)
ida_results_list[[paste(x, "->", y, sep = "")]] <- result
}
}
# Convert IDA results to DataFrame
ida_results_df <- do.call(rbind, lapply(names(ida_results_list), function(name) {
data.frame(
Pair = name,
Causal_Effect = I(ida_results_list[[name]])
)
}))
print("IDA Results:")
print(ida_results_df)
library(ggplot2)
# Set the seed for reproducibility
set.seed(42)
# Generate the data
n_samples <- 1000
# Generate the first layer of input variables
diet_score <- round(runif(n_samples, 1, 10))
sleep_duration <- round(rnorm(n_samples, 8, 4))
family_history <- round(rnorm(4,2))
# Generate the intermediate variables
bmi <-  0.5 * diet_score + 0.5 * sleep_duration + rnorm(n_samples, 0, 1)
cv_risk <- bmi * 2 + rnorm(n_samples, 2, 3)
# Create the dataset
data <- data.frame(
diet_score = diet_score,
sleep_duration = sleep_duration,
bmi = bmi,
cv_risk = cv_risk
)
write.csv(data, "Synthetic_CV_Dec.csv", row.names = FALSE)
# Convert data to matrix and scale
X <- as.matrix(data)
X_scaled <- scale(X)
# PC Algorithm
suffStat <- list(C = cor(X_scaled), n = nrow(X_scaled))
alpha <- 0.1
var_names <- colnames(X_scaled)
pc_result <- pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = alpha,
labels = var_names,
verbose = FALSE,
skel.method = "stable"
)
# Plot PC result
plot(pc_result@graph)
# Get adjacency matrix
adj_matrix <- as(pc_result@graph, "matrix")
# Function to get edges
get_edges <- function(adj_matrix) {
edges <- which(adj_matrix != 0, arr.ind = TRUE)
edge_list <- data.frame(
from = rownames(adj_matrix)[edges[, 1]],
to = colnames(adj_matrix)[edges[, 2]]
)
return(edge_list)
}
# Apply IDA
ida_results_list <- list()
edge_list <- get_edges(adj_matrix)
# Loop through edges and apply IDA
for (i in 1:nrow(edge_list)) {
x <- edge_list[i, "from"]
y <- edge_list[i, "to"]
if (x != y) {
x_pos <- match(x, var_names)
y_pos <- match(y, var_names)
result <- pcalg::ida(
y.pos = y_pos,
x.pos = x_pos,
mcov = cov(X_scaled),
graphEst = pc_result@graph,
method = "local",
type = "pdag"
)
ida_results_list[[paste(x, "->", y, sep = "")]] <- result
}
}
# Convert IDA results to DataFrame
ida_results_df <- do.call(rbind, lapply(names(ida_results_list), function(name) {
data.frame(
Pair = name,
Causal_Effect = I(ida_results_list[[name]])
)
}))
print("IDA Results:")
print(ida_results_df)
library(ggplot2)
# Set the seed for reproducibility
set.seed(42)
# Generate the data
n_samples <- 1000
# Generate the first layer of input variables
diet_score <- round(runif(n_samples, 1, 10))
sleep_duration <- round(rnorm(n_samples, 8, 4))
family_history <- round(rnorm(4,2))
# Generate the intermediate variables
bmi <-  0.5 * diet_score + 0.5 * sleep_duration + rnorm(n_samples, 0, 1)
mental_health = 0.4 * bmi + rnorm(n_smaples, 0, 1)
library(ggplot2)
# Set the seed for reproducibility
set.seed(42)
# Generate the data
n_samples <- 1000
# Generate the first layer of input variables
diet_score <- round(runif(n_samples, 1, 10))
sleep_duration <- round(rnorm(n_samples, 8, 4))
family_history <- round(rnorm(4,2))
# Generate the intermediate variables
bmi <-  0.5 * diet_score + 0.5 * sleep_duration + rnorm(n_samples, 0, 1)
mental_health = 0.4 * bmi + rnorm(n_samples, 0, 1)
cv_risk <- bmi * 2 + rnorm(n_samples, 2, 3)
# Create the dataset
data <- data.frame(
diet_score = diet_score,
sleep_duration = sleep_duration,
bmi = bmi,
mental_health = mental_health
cv_risk = cv_risk
library(ggplot2)
# Set the seed for reproducibility
set.seed(42)
# Generate the data
n_samples <- 1000
# Generate the first layer of input variables
diet_score <- round(runif(n_samples, 1, 10))
sleep_duration <- round(rnorm(n_samples, 8, 4))
family_history <- round(rnorm(4,2))
# Generate the intermediate variables
bmi <-  0.5 * diet_score + 0.5 * sleep_duration + rnorm(n_samples, 0, 1)
mental_health = 0.4 * bmi + rnorm(n_samples, 0, 1)
cv_risk <- bmi * 2 + rnorm(n_samples, 2, 3)
# Create the dataset
data <- data.frame(
diet_score = diet_score,
sleep_duration = sleep_duration,
bmi = bmi,
mental_health = mental_health,
cv_risk = cv_risk
)
write.csv(data, "Synthetic_CV_Dec.csv", row.names = FALSE)
# Convert data to matrix and scale
X <- as.matrix(data)
X_scaled <- scale(X)
# PC Algorithm
suffStat <- list(C = cor(X_scaled), n = nrow(X_scaled))
alpha <- 0.1
var_names <- colnames(X_scaled)
pc_result <- pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = alpha,
labels = var_names,
verbose = FALSE,
skel.method = "stable"
)
# Plot PC result
plot(pc_result@graph)
# Get adjacency matrix
adj_matrix <- as(pc_result@graph, "matrix")
# Function to get edges
get_edges <- function(adj_matrix) {
edges <- which(adj_matrix != 0, arr.ind = TRUE)
edge_list <- data.frame(
from = rownames(adj_matrix)[edges[, 1]],
to = colnames(adj_matrix)[edges[, 2]]
)
return(edge_list)
}
# Apply IDA
ida_results_list <- list()
edge_list <- get_edges(adj_matrix)
# Loop through edges and apply IDA
for (i in 1:nrow(edge_list)) {
x <- edge_list[i, "from"]
y <- edge_list[i, "to"]
if (x != y) {
x_pos <- match(x, var_names)
y_pos <- match(y, var_names)
result <- pcalg::ida(
y.pos = y_pos,
x.pos = x_pos,
mcov = cov(X_scaled),
graphEst = pc_result@graph,
method = "local",
type = "pdag"
)
ida_results_list[[paste(x, "->", y, sep = "")]] <- result
}
}
# Convert IDA results to DataFrame
ida_results_df <- do.call(rbind, lapply(names(ida_results_list), function(name) {
data.frame(
Pair = name,
Causal_Effect = I(ida_results_list[[name]])
)
}))
print("IDA Results:")
print(ida_results_df)
library(ggplot2)
# Set the seed for reproducibility
set.seed(42)
# Generate the data
n_samples <- 1000
# Generate the first layer of input variables
diet_score <- round(runif(n_samples, 1, 10))
sleep_duration <- round(rnorm(n_samples, 8, 4))
family_history <- round(rnorm(4,2))
# Generate the intermediate variables
bmi <-  0.4 * diet_score + 0.5 * sleep_duration + rnorm(n_samples, 0, 1)
mental_health = 0.4 * bmi + rnorm(n_samples, 0, 1)
cv_risk <- bmi * 1.5 + rnorm(n_samples, 2, 3)
# Create the dataset
data <- data.frame(
diet_score = diet_score,
sleep_duration = sleep_duration,
bmi = bmi,
mental_health = mental_health,
cv_risk = cv_risk
)
write.csv(data, "Synthetic_CV_Dec.csv", row.names = FALSE)
# Convert data to matrix and scale
X <- as.matrix(data)
X_scaled <- scale(X)
# PC Algorithm
suffStat <- list(C = cor(X_scaled), n = nrow(X_scaled))
alpha <- 0.1
var_names <- colnames(X_scaled)
pc_result <- pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = alpha,
labels = var_names,
verbose = FALSE,
skel.method = "stable"
)
# Plot PC result
plot(pc_result@graph)
# Get adjacency matrix
adj_matrix <- as(pc_result@graph, "matrix")
# Function to get edges
get_edges <- function(adj_matrix) {
edges <- which(adj_matrix != 0, arr.ind = TRUE)
edge_list <- data.frame(
from = rownames(adj_matrix)[edges[, 1]],
to = colnames(adj_matrix)[edges[, 2]]
)
return(edge_list)
}
# Apply IDA
ida_results_list <- list()
edge_list <- get_edges(adj_matrix)
# Loop through edges and apply IDA
for (i in 1:nrow(edge_list)) {
x <- edge_list[i, "from"]
y <- edge_list[i, "to"]
if (x != y) {
x_pos <- match(x, var_names)
y_pos <- match(y, var_names)
result <- pcalg::ida(
y.pos = y_pos,
x.pos = x_pos,
mcov = cov(X_scaled),
graphEst = pc_result@graph,
method = "local",
type = "pdag"
)
ida_results_list[[paste(x, "->", y, sep = "")]] <- result
}
}
# Convert IDA results to DataFrame
ida_results_df <- do.call(rbind, lapply(names(ida_results_list), function(name) {
data.frame(
Pair = name,
Causal_Effect = I(ida_results_list[[name]])
)
}))
print("IDA Results:")
print(ida_results_df)
library(ggplot2)
# Set the seed for reproducibility
set.seed(42)
# Generate the data
n_samples <- 1000
# Generate the first layer of input variables
sleepiness <- round(runif(n_samples, 1, 10))
smoking <- round(rnorm(n_samples, 5, 2))
air_quality_index <- round(rnorm(5,2))
# Generate the intermediate variables
drink_coffee <-  0.5 * sleepiness + 0.4 * smoking + rnorm(n_samples, 0, 1)
lung_cancer_risk <- smoking * 2 + air_quality_index + rnorm(n_samples, 2, 3)
# Create the dataset
data <- data.frame(
sleepiness = sleepiness,
smoking = smoking,
air_quality_index = air_quality_index,
drink_coffee = drink_coffee,
lung_cancer_risk = lung_cancer_risk
)
write.csv(data, "Synthetic_LC_Dec.csv", row.names = FALSE)
# Convert data to matrix and scale
X <- as.matrix(data)
X_scaled <- scale(X)
# PC Algorithm
suffStat <- list(C = cor(X_scaled), n = nrow(X_scaled))
alpha <- 0.1
var_names <- colnames(X_scaled)
pc_result <- pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = alpha,
labels = var_names,
verbose = FALSE,
skel.method = "stable"
)
# Plot PC result
plot(pc_result@graph)
# Get adjacency matrix
adj_matrix <- as(pc_result@graph, "matrix")
# Function to get edges
get_edges <- function(adj_matrix) {
edges <- which(adj_matrix != 0, arr.ind = TRUE)
edge_list <- data.frame(
from = rownames(adj_matrix)[edges[, 1]],
to = colnames(adj_matrix)[edges[, 2]]
)
return(edge_list)
}
# Apply IDA
ida_results_list <- list()
edge_list <- get_edges(adj_matrix)
# Loop through edges and apply IDA
for (i in 1:nrow(edge_list)) {
x <- edge_list[i, "from"]
y <- edge_list[i, "to"]
if (x != y) {
x_pos <- match(x, var_names)
y_pos <- match(y, var_names)
result <- pcalg::ida(
y.pos = y_pos,
x.pos = x_pos,
mcov = cov(X_scaled),
graphEst = pc_result@graph,
method = "local",
type = "pdag"
)
ida_results_list[[paste(x, "->", y, sep = "")]] <- result
}
}
# Convert IDA results to DataFrame
ida_results_df <- do.call(rbind, lapply(names(ida_results_list), function(name) {
data.frame(
Pair = name,
Causal_Effect = I(ida_results_list[[name]])
)
}))
print("IDA Results:")
print(ida_results_df)
library(ggplot2)
# Set the seed for reproducibility
set.seed(42)
# Generate the data
n_samples <- 1000
# Generate the first layer of input variables
diet_score <- round(runif(n_samples, 1, 10))
sleep_duration <- round(rnorm(n_samples, 8, 4))
family_history <- round(rnorm(4,2))
# Generate the intermediate variables
bmi <-  0.4 * diet_score + 0.5 * sleep_duration + rnorm(n_samples, 0, 1)
mental_health = 0.4 * bmi + rnorm(n_samples, 0, 1)
cv_risk <- bmi * 1.5 + rnorm(n_samples, 2, 3)
# Create the dataset
data <- data.frame(
diet_score = diet_score,
sleep_duration = sleep_duration,
bmi = bmi,
mental_health = mental_health,
cv_risk = cv_risk
)
write.csv(data, "Synthetic_CV_Dec.csv", row.names = FALSE)
# Convert data to matrix and scale
X <- as.matrix(data)
X_scaled <- scale(X)
# PC Algorithm
suffStat <- list(C = cor(X_scaled), n = nrow(X_scaled))
alpha <- 0.1
var_names <- colnames(X_scaled)
pc_result <- pc(
suffStat = suffStat,
indepTest = gaussCItest,
alpha = alpha,
labels = var_names,
verbose = FALSE,
skel.method = "stable"
)
# Plot PC result
plot(pc_result@graph)
# Get adjacency matrix
adj_matrix <- as(pc_result@graph, "matrix")
# Function to get edges
get_edges <- function(adj_matrix) {
edges <- which(adj_matrix != 0, arr.ind = TRUE)
edge_list <- data.frame(
from = rownames(adj_matrix)[edges[, 1]],
to = colnames(adj_matrix)[edges[, 2]]
)
return(edge_list)
}
# Apply IDA
ida_results_list <- list()
edge_list <- get_edges(adj_matrix)
# Loop through edges and apply IDA
for (i in 1:nrow(edge_list)) {
x <- edge_list[i, "from"]
y <- edge_list[i, "to"]
if (x != y) {
x_pos <- match(x, var_names)
y_pos <- match(y, var_names)
result <- pcalg::ida(
y.pos = y_pos,
x.pos = x_pos,
mcov = cov(X_scaled),
graphEst = pc_result@graph,
method = "local",
type = "pdag"
)
ida_results_list[[paste(x, "->", y, sep = "")]] <- result
}
}
# Convert IDA results to DataFrame
ida_results_df <- do.call(rbind, lapply(names(ida_results_list), function(name) {
data.frame(
Pair = name,
Causal_Effect = I(ida_results_list[[name]])
)
}))
print("IDA Results:")
print(ida_results_df)
